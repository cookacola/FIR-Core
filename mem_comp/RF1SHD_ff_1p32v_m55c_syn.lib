/*
 *      CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
 *      
 *      Copyright (c) 1993-2024  ARM Physical IP, Inc.  All  Rights Reserved.
 *      
 *      Use of this Software is subject to the terms and conditions  of the
 *      applicable license agreement with ARM Physical IP, Inc.  In addition,
 *      this Software is protected by patents, copyright law and international
 *      treaties.
 *      
 *      The copyright notice(s) in this Software does not indicate actual or
 *      intended publication of this Software.
 *      
 *      name:			High Speed/Density Single Port Register File Generator
 *           			IBM CMRF8SF-LPVT Process
 *      version:		2008Q3V1
 *      comment:		
 *      configuration:	 -instname RF1SHD -words 128 -bits 64 -frequency 1 -ring_width 2.0 -mux 2 -write_mask off -wp_size 8 -top_layer "m6-m8_m4" -power_type rings -horiz met3 -vert met2 -cust_comment "" -bus_notation on -left_bus_delim "[" -right_bus_delim "]" -pwr_gnd_rename "VDD:VDD,GND:VSS" -prefix "" -pin_space 0.0 -name_case upper -check_instname on -diodes on -inside_ring_type GND -drive 4 -asvm on -libname USERLIB -corners ff_1p32v_m55c,ff_1p65v_125c,tt_1p2v_25c,ss_1p08v_m55c
 *
 *      Synopsys model for Synchronous Single-Port Register File
 *
 *      Library Name:   USERLIB
 *      Instance Name:  RF1SHD
 *      Words:          128
 *      Word Width:     64
 *      Mux:            2
 *      Corner:        ff_1p32v_m55c
 *
 *      Creation Date:  2024-11-23 20:01:14Z
 *      Version:        2008Q3V1
 *
 *      Verified With: Synopsys Design Compiler
 *
 *      Modeling Assumptions: This library contains a black box description
 *          for a memory element.  At the library level, a
 *          default_max_transition constraint is set to the maximum
 *          characterized input slew.  Each output has a max_capacitance
 *          constraint set to the highest characterized output load.  These two
 *          constraints force Design Compiler to synthesize circuits that
 *          operate within the characterization space.  The user can tighten
 *          these constraints, if desired.  When writing SDF from Design
 *          Compiler, use the version 2.1 option.  This ensures the SDF will
 *          annotate to simulation models provided with this generator.
 *
 *      Modeling Limitations: 
 *          Due to limitations of the .lib format, some data reduction was
 *          necessary.  When reducing data, minimum values were chosen for the
 *          fast case corner and maximum values were used for the typical and
 *          best case corners.  It is recommended that critical timing and
 *          setup and hold times be checked at all corners.
 *
 *      Known Bugs: None.
 *
 *      Known Work Arounds: N/A
 *
 */

library(USERLIB) {
	delay_model		: table_lookup;
	revision		: 1.1;	
	date			: "2024-11-23 20:01:14Z";
	comment			: "Confidential Information of ARM Physical IP, Inc.  Use subject to ARM Physical IP, Inc. license.  Copyright (c) 1993-2024 ARM Physical IP, Inc.";
	time_unit		: "1ns";
	voltage_unit		: "1V";
	current_unit		: "1mA";
	leakage_power_unit	: "1mW";
	nom_process		: 1;
	nom_temperature		: -55.000;
	nom_voltage		: 1.320;
	capacitive_load_unit	 (1,pf);

	pulling_resistance_unit	        : "1kohm";

	/* additional header data */
	default_cell_leakage_power      : 0;
	default_fanout_load		: 1;
	default_inout_pin_cap		: 0.005;
	default_input_pin_cap		: 0.005;
	default_output_pin_cap		: 0.0;
	default_max_transition		: 1.500;

        /* default attributes */
        default_leakage_power_density : 0.0;
        slew_derate_from_library      : 1.000;
        slew_lower_threshold_pct_fall : 10.000;
        slew_upper_threshold_pct_fall : 90.000;
        slew_lower_threshold_pct_rise : 10.000;
        slew_upper_threshold_pct_rise : 90.000;
        input_threshold_pct_fall      : 50.000;
        input_threshold_pct_rise      : 50.000;
        output_threshold_pct_fall     : 50.000;
        output_threshold_pct_rise     : 50.000;

 	/* k-factors */
 	k_process_cell_fall             : 1;
 	k_process_cell_leakage_power    : 0;
 	k_process_cell_rise             : 1;
 	k_process_fall_transition       : 1;
 	k_process_hold_fall             : 1;
 	k_process_hold_rise             : 1;
 	k_process_internal_power        : 0;
 	k_process_min_pulse_width_high  : 1;
 	k_process_min_pulse_width_low   : 1;
 	k_process_pin_cap               : 0;
 	k_process_recovery_fall         : 1;
 	k_process_recovery_rise         : 1;
 	k_process_rise_transition       : 1;
 	k_process_setup_fall            : 1;
 	k_process_setup_rise            : 1;
 	k_process_wire_cap              : 0;
 	k_process_wire_res              : 0;
	k_temp_cell_fall		: 0.000;
	k_temp_cell_rise		: 0.000;
	k_temp_hold_fall                : 0.000;
	k_temp_hold_rise                : 0.000;
	k_temp_min_pulse_width_high     : 0.000;
	k_temp_min_pulse_width_low      : 0.000;
	k_temp_min_period               : 0.000;
	k_temp_rise_propagation         : 0.000;
	k_temp_fall_propagation         : 0.000;
	k_temp_rise_transition          : 0.0;
	k_temp_fall_transition          : 0.0;
	k_temp_recovery_fall            : 0.000;
	k_temp_recovery_rise            : 0.000;
	k_temp_setup_fall               : 0.000;
	k_temp_setup_rise               : 0.000;
	k_volt_cell_fall                : 0.000;
	k_volt_cell_rise                : 0.000;
	k_volt_hold_fall                : 0.000;
	k_volt_hold_rise                : 0.000;
	k_volt_min_pulse_width_high     : 0.000;
	k_volt_min_pulse_width_low      : 0.000;
	k_volt_min_period               : 0.000;
	k_volt_rise_propagation         : 0.000;
	k_volt_fall_propagation         : 0.000;
	k_volt_rise_transition	        : 0.0;
	k_volt_fall_transition	        : 0.0;
	k_volt_recovery_fall            : 0.000;
	k_volt_recovery_rise            : 0.000;
	k_volt_setup_fall               : 0.000;
	k_volt_setup_rise               : 0.000;


        operating_conditions(ff_1p32v_m55c) {
		process	 : 1;
		temperature	 : -55.000;
		voltage	 : 1.320;
		tree_type	 : balanced_tree;
	}
        default_operating_conditions : ff_1p32v_m55c;
	wire_load("sample") {
		resistance	 : 1.6e-05;
		capacitance	 : 0.0002;
		area	 : 1.7;
  		slope	 : 500;
		fanout_length	 (1,500);
	}
        lu_table_template(RF1SHD_bist_mux_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        lu_table_template(RF1SHD_mux_mem_out_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        lu_table_template(RF1SHD_mem_out_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(RF1SHD_bist_mux_slew_template) {
           variable_1 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(RF1SHD_mem_out_slew_template) {
           variable_1 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(RF1SHD_clk_setup_constraint_template) {
           variable_1 : related_pin_transition;
           variable_2 : constrained_pin_transition;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(RF1SHD_constraint_template) {
           variable_1 : related_pin_transition;
           variable_2 : constrained_pin_transition;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        power_lut_template(RF1SHD_energy_template_clkslew_load) {
           variable_1 : input_transition_time;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        power_lut_template(RF1SHD_energy_template_sigslew_load) {
           variable_1 : input_transition_time;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        power_lut_template(RF1SHD_energy_template_load) {
           variable_1 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        power_lut_template(RF1SHD_energy_template_clkslew) {
           variable_1 : input_transition_time;
               index_1 ("1000, 1001");
        }
        power_lut_template(RF1SHD_energy_template_sigslew) {
           variable_1 : input_transition_time;
               index_1 ("1000, 1001");
        }
	library_features(report_delay_calculation);
	type (RF1SHD_DATA) {
		base_type : array ;
		data_type : bit ;
		bit_width : 64;
		bit_from : 63;
		bit_to : 0 ;
		downto : true ;
	}
	type (RF1SHD_UPM) {
		base_type : array ;
		data_type : bit ;
		bit_width : 3;
		bit_from : 2;
		bit_to : 0 ;
		downto : true ;
	}
	type (RF1SHD_ADDRESS) {
		base_type : array ;
		data_type : bit ;
		bit_width : 7;
		bit_from : 6;
		bit_to : 0 ;
		downto : true ;
	}
cell(RF1SHD) {
	area		 : 42499.458;
	dont_use	 : TRUE;
	dont_touch	 : TRUE;
        interface_timing : TRUE;
	memory() {
		type : ram;
		address_width : 7;
		word_width : 64;
	}
        bus(Q)   {
                bus_type : RF1SHD_DATA;
		direction : output;
		max_capacitance : 0.650;
                memory_read() {
			address : A;
		}
                timing() {
                        related_pin :   "CLK" ;
                        timing_type : rising_edge ;
                        timing_sense : non_unate;
                        cell_rise(RF1SHD_mem_out_delay_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.000, 0.020, 0.040, 0.090, 0.220, 0.430, 0.650");
                        values ( \
                          "0.722, 0.733, 0.744, 0.770, 0.839, 0.951, 1.068", \
                          "0.751, 0.762, 0.772, 0.799, 0.868, 0.979, 1.096", \
                          "0.787, 0.797, 0.808, 0.835, 0.904, 1.015, 1.132", \
                          "0.858, 0.869, 0.880, 0.906, 0.975, 1.087, 1.204", \
                          "1.074, 1.084, 1.095, 1.121, 1.190, 1.302, 1.419", \
                          "1.432, 1.442, 1.453, 1.480, 1.549, 1.660, 1.777", \
                          "1.790, 1.801, 1.811, 1.838, 1.907, 2.019, 2.136" \
                        )
                        }
                        rise_transition(RF1SHD_mem_out_slew_template) {
                        index_1 ("0.000, 0.020, 0.040, 0.090, 0.220, 0.430, 0.650");
                        values ("0.021, 0.048, 0.074, 0.140, 0.311, 0.588, 0.878")
                        }
                        cell_fall(RF1SHD_mem_out_delay_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.000, 0.020, 0.040, 0.090, 0.220, 0.430, 0.650");
                        values ( \
                          "0.722, 0.733, 0.744, 0.770, 0.839, 0.951, 1.068", \
                          "0.751, 0.762, 0.772, 0.799, 0.868, 0.979, 1.096", \
                          "0.787, 0.797, 0.808, 0.835, 0.904, 1.015, 1.132", \
                          "0.858, 0.869, 0.880, 0.906, 0.975, 1.087, 1.204", \
                          "1.074, 1.084, 1.095, 1.121, 1.190, 1.302, 1.419", \
                          "1.432, 1.442, 1.453, 1.480, 1.549, 1.660, 1.777", \
                          "1.790, 1.801, 1.811, 1.838, 1.907, 2.019, 2.136" \
                        )
                        }
                        fall_transition(RF1SHD_mem_out_slew_template) {
                        index_1 ("0.000, 0.020, 0.040, 0.090, 0.220, 0.430, 0.650");
                        values ("0.023, 0.053, 0.082, 0.155, 0.345, 0.651, 0.972")
                        }
                }
        }
        pin(CLK)   {
		direction : input;
		capacitance : 0.054;
                clock : true;
                max_transition : 1.500;
                min_pulse_width_high : 0.175 ;
                min_pulse_width_low  : 0.204 ;
                min_period           : 1.705 ;


                internal_power(){
                        when : "(!CEN & ! \
                                 (WEN) \
                                ) \
                                 ";
                        rise_power(RF1SHD_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("46.774, 46.774")
                        }
                        fall_power(RF1SHD_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.000, 0.000")
                        }
                }
                internal_power(){
                        when : "(!CEN & \
                                 (WEN) \
                                ) \
                                 ";
                        rise_power(RF1SHD_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("43.893, 43.893")
                        }
                        fall_power(RF1SHD_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.000, 0.000")
                        }
                }
         internal_power(){
                 when : "(CEN)";
                        rise_power(RF1SHD_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.165, 0.165")
                        }
                        fall_power(RF1SHD_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.000, 0.000")
                        }
                }
        }

        pin(CEN)   {
                direction : input;
                capacitance : 0.006;
                timing() {
                        related_pin     : CLK;
                        timing_type     : setup_rising ;
                        rise_constraint(RF1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.198, 0.221, 0.250, 0.308, 0.480, 0.768, 1.055", \
                          "0.170, 0.193, 0.221, 0.279, 0.451, 0.739, 1.027", \
                          "0.134, 0.157, 0.186, 0.243, 0.416, 0.703, 0.991", \
                          "0.062, 0.085, 0.114, 0.171, 0.344, 0.632, 0.919", \
                          "-0.153, -0.130, -0.101, -0.044, 0.129, 0.416, 0.704", \
                          "-0.511, -0.488, -0.460, -0.402, -0.229, 0.058, 0.346", \
                          "-0.870, -0.847, -0.818, -0.760, -0.588, -0.300, -0.013" \
                        )
                        }
                        fall_constraint(RF1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.222, 0.248, 0.279, 0.343, 0.534, 0.852, 1.170", \
                          "0.193, 0.219, 0.251, 0.314, 0.505, 0.823, 1.142", \
                          "0.158, 0.183, 0.215, 0.278, 0.469, 0.788, 1.106", \
                          "0.086, 0.111, 0.143, 0.207, 0.398, 0.716, 1.034", \
                          "-0.129, -0.104, -0.072, -0.008, 0.183, 0.501, 0.819", \
                          "-0.487, -0.462, -0.430, -0.367, -0.176, 0.143, 0.461", \
                          "-0.846, -0.820, -0.789, -0.725, -0.534, -0.216, 0.102" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLK;
                        timing_type     : hold_rising ;
                        rise_constraint(RF1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.212, 0.188, 0.160, 0.102, 0.000, 0.000, 0.000", \
                          "0.570, 0.547, 0.518, 0.461, 0.288, 0.000, 0.000", \
                          "0.928, 0.905, 0.876, 0.819, 0.646, 0.359, 0.071" \
                        )
                        }
                        fall_constraint(RF1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.014, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.229, 0.204, 0.172, 0.108, 0.000, 0.000, 0.000", \
                          "0.588, 0.562, 0.530, 0.467, 0.276, 0.000, 0.000", \
                          "0.946, 0.921, 0.889, 0.825, 0.634, 0.316, 0.000" \
                        )
                        }
               }
        }
        pin(WEN){
                direction : input;
                capacitance : 0.017;
                timing() {
                        related_pin     : CLK;
                        timing_type     : setup_rising ;
                        rise_constraint(RF1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.152, 0.180, 0.215, 0.286, 0.497, 0.850, 1.203", \
                          "0.123, 0.151, 0.187, 0.257, 0.469, 0.821, 1.174", \
                          "0.087, 0.116, 0.151, 0.221, 0.433, 0.785, 1.138", \
                          "0.016, 0.044, 0.079, 0.150, 0.361, 0.714, 1.066", \
                          "-0.199, -0.171, -0.136, -0.065, 0.146, 0.499, 0.851", \
                          "-0.558, -0.530, -0.494, -0.424, -0.212, 0.140, 0.493", \
                          "-0.916, -0.888, -0.853, -0.782, -0.571, -0.218, 0.135" \
                        )
                        }
                        fall_constraint(RF1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.232, 0.255, 0.284, 0.342, 0.516, 0.806, 1.096", \
                          "0.203, 0.226, 0.255, 0.313, 0.487, 0.777, 1.067", \
                          "0.167, 0.190, 0.219, 0.277, 0.451, 0.741, 1.031", \
                          "0.095, 0.119, 0.148, 0.206, 0.380, 0.670, 0.959", \
                          "-0.120, -0.096, -0.067, -0.009, 0.165, 0.455, 0.744", \
                          "-0.478, -0.455, -0.426, -0.368, -0.194, 0.096, 0.386", \
                          "-0.836, -0.813, -0.784, -0.726, -0.552, -0.262, 0.028" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLK;
                        timing_type     : hold_rising ;
                        rise_constraint(RF1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.032, 0.004, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.104, 0.075, 0.040, 0.000, 0.000, 0.000, 0.000", \
                          "0.319, 0.290, 0.255, 0.185, 0.000, 0.000, 0.000", \
                          "0.677, 0.649, 0.613, 0.543, 0.331, 0.000, 0.000", \
                          "1.035, 1.007, 0.972, 0.901, 0.690, 0.337, 0.000" \
                        )
                        }
                        fall_constraint(RF1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.070, 0.047, 0.018, 0.000, 0.000, 0.000, 0.000", \
                          "0.285, 0.262, 0.233, 0.175, 0.001, 0.000, 0.000", \
                          "0.643, 0.620, 0.591, 0.533, 0.359, 0.069, 0.000", \
                          "1.001, 0.978, 0.949, 0.891, 0.717, 0.427, 0.138" \
                        )
                        }
               }
        }
        bus(A)   {
                bus_type : RF1SHD_ADDRESS;
                direction : input;
                capacitance : 0.012;
                timing() {
                        related_pin     : CLK;
                        timing_type     : setup_rising ;
                        rise_constraint(RF1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.244, 0.276, 0.315, 0.394, 0.632, 1.028, 1.424", \
                          "0.215, 0.247, 0.286, 0.366, 0.603, 0.999, 1.395", \
                          "0.179, 0.211, 0.251, 0.330, 0.567, 0.964, 1.360", \
                          "0.108, 0.139, 0.179, 0.258, 0.496, 0.892, 1.288", \
                          "-0.107, -0.076, -0.036, 0.043, 0.281, 0.677, 1.073", \
                          "-0.466, -0.434, -0.394, -0.315, -0.078, 0.318, 0.715", \
                          "-0.824, -0.792, -0.753, -0.674, -0.436, -0.040, 0.356" \
                        )
                        }
                        fall_constraint(RF1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.158, 0.187, 0.224, 0.297, 0.517, 0.882, 1.248", \
                          "0.129, 0.159, 0.195, 0.268, 0.488, 0.854, 1.219", \
                          "0.094, 0.123, 0.159, 0.233, 0.452, 0.818, 1.183", \
                          "0.022, 0.051, 0.088, 0.161, 0.380, 0.746, 1.112", \
                          "-0.193, -0.164, -0.127, -0.054, 0.165, 0.531, 0.897", \
                          "-0.551, -0.522, -0.486, -0.412, -0.193, 0.173, 0.538", \
                          "-0.910, -0.881, -0.844, -0.771, -0.551, -0.186, 0.180" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLK;
                        timing_type     : hold_rising ;
                        rise_constraint(RF1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.025, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.060, 0.029, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.132, 0.100, 0.061, 0.000, 0.000, 0.000, 0.000", \
                          "0.347, 0.315, 0.276, 0.197, 0.000, 0.000, 0.000", \
                          "0.706, 0.674, 0.634, 0.555, 0.317, 0.000, 0.000", \
                          "1.064, 1.032, 0.993, 0.913, 0.676, 0.280, 0.000" \
                        )
                        }
                        fall_constraint(RF1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.010, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.039, 0.009, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.075, 0.045, 0.009, 0.000, 0.000, 0.000, 0.000", \
                          "0.146, 0.117, 0.080, 0.007, 0.000, 0.000, 0.000", \
                          "0.361, 0.332, 0.295, 0.222, 0.003, 0.000, 0.000", \
                          "0.720, 0.690, 0.654, 0.581, 0.361, 0.000, 0.000", \
                          "1.078, 1.049, 1.012, 0.939, 0.720, 0.354, 0.000" \
                        )
                        }
               }
                internal_power(){
                        when : "CEN";
                        rise_power(RF1SHD_energy_template_sigslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.260, 0.260")
                        }
                        fall_power(RF1SHD_energy_template_sigslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.260, 0.260")
                        }
                }
        }
        bus(D)   {
                bus_type : RF1SHD_DATA;
                memory_write() {
                        address : A;
                        clocked_on : "CLK";
                }
                direction : input;
                capacitance : 0.003;
                timing() {
                        related_pin     : CLK;
                        timing_type     : setup_rising ;
                        rise_constraint(RF1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.030, 0.056, 0.088, 0.152, 0.344, 0.665, 0.985", \
                          "0.001, 0.027, 0.059, 0.123, 0.315, 0.636, 0.957", \
                          "-0.035, -0.009, 0.023, 0.087, 0.280, 0.600, 0.921", \
                          "-0.106, -0.081, -0.049, 0.016, 0.208, 0.529, 0.849", \
                          "-0.321, -0.296, -0.264, -0.199, -0.007, 0.314, 0.634", \
                          "-0.680, -0.654, -0.622, -0.558, -0.365, -0.045, 0.276", \
                          "-1.038, -1.012, -0.980, -0.916, -0.724, -0.403, -0.083" \
                        )
                        }
                        fall_constraint(RF1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.110, 0.135, 0.166, 0.228, 0.414, 0.726, 1.037", \
                          "0.081, 0.106, 0.137, 0.199, 0.386, 0.697, 1.008", \
                          "0.045, 0.070, 0.101, 0.163, 0.350, 0.661, 0.972", \
                          "-0.027, -0.002, 0.029, 0.092, 0.278, 0.589, 0.900", \
                          "-0.242, -0.217, -0.186, -0.123, 0.063, 0.374, 0.685", \
                          "-0.600, -0.575, -0.544, -0.482, -0.295, 0.016, 0.327", \
                          "-0.958, -0.933, -0.902, -0.840, -0.653, -0.342, -0.031" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLK;
                        timing_type     : hold_rising ;
                        rise_constraint(RF1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.094, 0.068, 0.036, 0.000, 0.000, 0.000, 0.000", \
                          "0.122, 0.097, 0.064, 0.000, 0.000, 0.000, 0.000", \
                          "0.158, 0.132, 0.100, 0.036, 0.000, 0.000, 0.000", \
                          "0.230, 0.204, 0.172, 0.108, 0.000, 0.000, 0.000", \
                          "0.445, 0.419, 0.387, 0.323, 0.131, 0.000, 0.000", \
                          "0.803, 0.777, 0.745, 0.681, 0.489, 0.168, 0.000", \
                          "1.161, 1.136, 1.104, 1.040, 0.847, 0.527, 0.206" \
                        )
                        }
                        fall_constraint(RF1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.027, 0.002, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.099, 0.074, 0.043, 0.000, 0.000, 0.000, 0.000", \
                          "0.314, 0.289, 0.258, 0.195, 0.009, 0.000, 0.000", \
                          "0.672, 0.647, 0.616, 0.554, 0.367, 0.056, 0.000", \
                          "1.030, 1.006, 0.974, 0.912, 0.726, 0.415, 0.103" \
                        )
                        }
               }
        }

        cell_leakage_power : 1.58E-4;
}
}
