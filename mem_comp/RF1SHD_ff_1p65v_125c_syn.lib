/*
 *      CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
 *      
 *      Copyright (c) 1993-2024  ARM Physical IP, Inc.  All  Rights Reserved.
 *      
 *      Use of this Software is subject to the terms and conditions  of the
 *      applicable license agreement with ARM Physical IP, Inc.  In addition,
 *      this Software is protected by patents, copyright law and international
 *      treaties.
 *      
 *      The copyright notice(s) in this Software does not indicate actual or
 *      intended publication of this Software.
 *      
 *      name:			High Speed/Density Single Port Register File Generator
 *           			IBM CMRF8SF-LPVT Process
 *      version:		2008Q3V1
 *      comment:		
 *      configuration:	 -instname RF1SHD -words 128 -bits 64 -frequency 1 -ring_width 2.0 -mux 2 -write_mask off -wp_size 8 -top_layer "m6-m8_m4" -power_type rings -horiz met3 -vert met2 -cust_comment "" -bus_notation on -left_bus_delim "[" -right_bus_delim "]" -pwr_gnd_rename "VDD:VDD,GND:VSS" -prefix "" -pin_space 0.0 -name_case upper -check_instname on -diodes on -inside_ring_type GND -drive 4 -asvm on -libname USERLIB -corners ff_1p32v_m55c,ff_1p65v_125c,tt_1p2v_25c,ss_1p08v_m55c
 *
 *      Synopsys model for Synchronous Single-Port Register File
 *
 *      Library Name:   USERLIB
 *      Instance Name:  RF1SHD
 *      Words:          128
 *      Word Width:     64
 *      Mux:            2
 *      Corner:        ff_1p65v_125c
 *
 *      Creation Date:  2024-11-23 20:01:14Z
 *      Version:        2008Q3V1
 *
 *      Verified With: Synopsys Design Compiler
 *
 *      Modeling Assumptions: This library contains a black box description
 *          for a memory element.  At the library level, a
 *          default_max_transition constraint is set to the maximum
 *          characterized input slew.  Each output has a max_capacitance
 *          constraint set to the highest characterized output load.  These two
 *          constraints force Design Compiler to synthesize circuits that
 *          operate within the characterization space.  The user can tighten
 *          these constraints, if desired.  When writing SDF from Design
 *          Compiler, use the version 2.1 option.  This ensures the SDF will
 *          annotate to simulation models provided with this generator.
 *
 *      Modeling Limitations: 
 *          Due to limitations of the .lib format, some data reduction was
 *          necessary.  When reducing data, minimum values were chosen for the
 *          fast case corner and maximum values were used for the typical and
 *          best case corners.  It is recommended that critical timing and
 *          setup and hold times be checked at all corners.
 *
 *      Known Bugs: None.
 *
 *      Known Work Arounds: N/A
 *
 */

library(USERLIB) {
	delay_model		: table_lookup;
	revision		: 1.1;	
	date			: "2024-11-23 20:01:14Z";
	comment			: "Confidential Information of ARM Physical IP, Inc.  Use subject to ARM Physical IP, Inc. license.  Copyright (c) 1993-2024 ARM Physical IP, Inc.";
	time_unit		: "1ns";
	voltage_unit		: "1V";
	current_unit		: "1mA";
	leakage_power_unit	: "1mW";
	nom_process		: 1;
	nom_temperature		: 125.000;
	nom_voltage		: 1.650;
	capacitive_load_unit	 (1,pf);

	pulling_resistance_unit	        : "1kohm";

	/* additional header data */
	default_cell_leakage_power      : 0;
	default_fanout_load		: 1;
	default_inout_pin_cap		: 0.005;
	default_input_pin_cap		: 0.005;
	default_output_pin_cap		: 0.0;
	default_max_transition		: 1.500;

        /* default attributes */
        default_leakage_power_density : 0.0;
        slew_derate_from_library      : 1.000;
        slew_lower_threshold_pct_fall : 10.000;
        slew_upper_threshold_pct_fall : 90.000;
        slew_lower_threshold_pct_rise : 10.000;
        slew_upper_threshold_pct_rise : 90.000;
        input_threshold_pct_fall      : 50.000;
        input_threshold_pct_rise      : 50.000;
        output_threshold_pct_fall     : 50.000;
        output_threshold_pct_rise     : 50.000;

 	/* k-factors */
 	k_process_cell_fall             : 1;
 	k_process_cell_leakage_power    : 0;
 	k_process_cell_rise             : 1;
 	k_process_fall_transition       : 1;
 	k_process_hold_fall             : 1;
 	k_process_hold_rise             : 1;
 	k_process_internal_power        : 0;
 	k_process_min_pulse_width_high  : 1;
 	k_process_min_pulse_width_low   : 1;
 	k_process_pin_cap               : 0;
 	k_process_recovery_fall         : 1;
 	k_process_recovery_rise         : 1;
 	k_process_rise_transition       : 1;
 	k_process_setup_fall            : 1;
 	k_process_setup_rise            : 1;
 	k_process_wire_cap              : 0;
 	k_process_wire_res              : 0;
	k_temp_cell_fall		: 0.000;
	k_temp_cell_rise		: 0.000;
	k_temp_hold_fall                : 0.000;
	k_temp_hold_rise                : 0.000;
	k_temp_min_pulse_width_high     : 0.000;
	k_temp_min_pulse_width_low      : 0.000;
	k_temp_min_period               : 0.000;
	k_temp_rise_propagation         : 0.000;
	k_temp_fall_propagation         : 0.000;
	k_temp_rise_transition          : 0.0;
	k_temp_fall_transition          : 0.0;
	k_temp_recovery_fall            : 0.000;
	k_temp_recovery_rise            : 0.000;
	k_temp_setup_fall               : 0.000;
	k_temp_setup_rise               : 0.000;
	k_volt_cell_fall                : 0.000;
	k_volt_cell_rise                : 0.000;
	k_volt_hold_fall                : 0.000;
	k_volt_hold_rise                : 0.000;
	k_volt_min_pulse_width_high     : 0.000;
	k_volt_min_pulse_width_low      : 0.000;
	k_volt_min_period               : 0.000;
	k_volt_rise_propagation         : 0.000;
	k_volt_fall_propagation         : 0.000;
	k_volt_rise_transition	        : 0.0;
	k_volt_fall_transition	        : 0.0;
	k_volt_recovery_fall            : 0.000;
	k_volt_recovery_rise            : 0.000;
	k_volt_setup_fall               : 0.000;
	k_volt_setup_rise               : 0.000;


        operating_conditions(ff_1p65v_125c) {
		process	 : 1;
		temperature	 : 125.000;
		voltage	 : 1.650;
		tree_type	 : balanced_tree;
	}
        default_operating_conditions : ff_1p65v_125c;
	wire_load("sample") {
		resistance	 : 1.6e-05;
		capacitance	 : 0.0002;
		area	 : 1.7;
  		slope	 : 500;
		fanout_length	 (1,500);
	}
        lu_table_template(RF1SHD_bist_mux_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        lu_table_template(RF1SHD_mux_mem_out_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        lu_table_template(RF1SHD_mem_out_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(RF1SHD_bist_mux_slew_template) {
           variable_1 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(RF1SHD_mem_out_slew_template) {
           variable_1 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(RF1SHD_clk_setup_constraint_template) {
           variable_1 : related_pin_transition;
           variable_2 : constrained_pin_transition;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(RF1SHD_constraint_template) {
           variable_1 : related_pin_transition;
           variable_2 : constrained_pin_transition;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        power_lut_template(RF1SHD_energy_template_clkslew_load) {
           variable_1 : input_transition_time;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        power_lut_template(RF1SHD_energy_template_sigslew_load) {
           variable_1 : input_transition_time;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        power_lut_template(RF1SHD_energy_template_load) {
           variable_1 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        power_lut_template(RF1SHD_energy_template_clkslew) {
           variable_1 : input_transition_time;
               index_1 ("1000, 1001");
        }
        power_lut_template(RF1SHD_energy_template_sigslew) {
           variable_1 : input_transition_time;
               index_1 ("1000, 1001");
        }
	library_features(report_delay_calculation);
	type (RF1SHD_DATA) {
		base_type : array ;
		data_type : bit ;
		bit_width : 64;
		bit_from : 63;
		bit_to : 0 ;
		downto : true ;
	}
	type (RF1SHD_UPM) {
		base_type : array ;
		data_type : bit ;
		bit_width : 3;
		bit_from : 2;
		bit_to : 0 ;
		downto : true ;
	}
	type (RF1SHD_ADDRESS) {
		base_type : array ;
		data_type : bit ;
		bit_width : 7;
		bit_from : 6;
		bit_to : 0 ;
		downto : true ;
	}
cell(RF1SHD) {
	area		 : 42499.458;
	dont_use	 : TRUE;
	dont_touch	 : TRUE;
        interface_timing : TRUE;
	memory() {
		type : ram;
		address_width : 7;
		word_width : 64;
	}
        bus(Q)   {
                bus_type : RF1SHD_DATA;
		direction : output;
		max_capacitance : 0.650;
                memory_read() {
			address : A;
		}
                timing() {
                        related_pin :   "CLK" ;
                        timing_type : rising_edge ;
                        timing_sense : non_unate;
                        cell_rise(RF1SHD_mem_out_delay_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.000, 0.020, 0.040, 0.090, 0.220, 0.430, 0.650");
                        values ( \
                          "0.605, 0.615, 0.624, 0.647, 0.706, 0.803, 0.904", \
                          "0.629, 0.638, 0.647, 0.670, 0.730, 0.826, 0.927", \
                          "0.658, 0.668, 0.677, 0.700, 0.759, 0.856, 0.957", \
                          "0.717, 0.726, 0.736, 0.758, 0.818, 0.914, 1.015", \
                          "0.894, 0.903, 0.912, 0.935, 0.995, 1.091, 1.192", \
                          "1.188, 1.197, 1.206, 1.229, 1.289, 1.385, 1.486", \
                          "1.482, 1.491, 1.500, 1.523, 1.583, 1.679, 1.780" \
                        )
                        }
                        rise_transition(RF1SHD_mem_out_slew_template) {
                        index_1 ("0.000, 0.020, 0.040, 0.090, 0.220, 0.430, 0.650");
                        values ("0.024, 0.048, 0.073, 0.133, 0.291, 0.545, 0.811")
                        }
                        cell_fall(RF1SHD_mem_out_delay_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.000, 0.020, 0.040, 0.090, 0.220, 0.430, 0.650");
                        values ( \
                          "0.605, 0.615, 0.624, 0.647, 0.706, 0.803, 0.904", \
                          "0.629, 0.638, 0.647, 0.670, 0.730, 0.826, 0.927", \
                          "0.658, 0.668, 0.677, 0.700, 0.759, 0.856, 0.957", \
                          "0.717, 0.726, 0.736, 0.758, 0.818, 0.914, 1.015", \
                          "0.894, 0.903, 0.912, 0.935, 0.995, 1.091, 1.192", \
                          "1.188, 1.197, 1.206, 1.229, 1.289, 1.385, 1.486", \
                          "1.482, 1.491, 1.500, 1.523, 1.583, 1.679, 1.780" \
                        )
                        }
                        fall_transition(RF1SHD_mem_out_slew_template) {
                        index_1 ("0.000, 0.020, 0.040, 0.090, 0.220, 0.430, 0.650");
                        values ("0.024, 0.052, 0.079, 0.148, 0.326, 0.614, 0.915")
                        }
                }
        }
        pin(CLK)   {
		direction : input;
		capacitance : 0.055;
                clock : true;
                max_transition : 1.500;
                min_pulse_width_high : 0.165 ;
                min_pulse_width_low  : 0.175 ;
                min_period           : 1.504 ;


                internal_power(){
                        when : "(!CEN & ! \
                                 (WEN) \
                                ) \
                                 ";
                        rise_power(RF1SHD_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("76.643, 76.643")
                        }
                        fall_power(RF1SHD_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.000, 0.000")
                        }
                }
                internal_power(){
                        when : "(!CEN & \
                                 (WEN) \
                                ) \
                                 ";
                        rise_power(RF1SHD_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("70.299, 70.299")
                        }
                        fall_power(RF1SHD_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.000, 0.000")
                        }
                }
         internal_power(){
                 when : "(CEN)";
                        rise_power(RF1SHD_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.283, 0.283")
                        }
                        fall_power(RF1SHD_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.000, 0.000")
                        }
                }
        }

        pin(CEN)   {
                direction : input;
                capacitance : 0.006;
                timing() {
                        related_pin     : CLK;
                        timing_type     : setup_rising ;
                        rise_constraint(RF1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.200, 0.221, 0.248, 0.302, 0.464, 0.734, 1.004", \
                          "0.176, 0.198, 0.225, 0.279, 0.441, 0.711, 0.980", \
                          "0.147, 0.168, 0.195, 0.249, 0.411, 0.681, 0.951", \
                          "0.088, 0.109, 0.136, 0.190, 0.352, 0.622, 0.892", \
                          "-0.089, -0.067, -0.040, 0.014, 0.176, 0.446, 0.716", \
                          "-0.383, -0.361, -0.334, -0.280, -0.118, 0.152, 0.422", \
                          "-0.677, -0.655, -0.628, -0.574, -0.412, -0.143, 0.127" \
                        )
                        }
                        fall_constraint(RF1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.184, 0.208, 0.238, 0.299, 0.482, 0.786, 1.090", \
                          "0.160, 0.185, 0.215, 0.276, 0.458, 0.763, 1.067", \
                          "0.131, 0.155, 0.186, 0.246, 0.429, 0.733, 1.037", \
                          "0.072, 0.096, 0.127, 0.188, 0.370, 0.674, 0.978", \
                          "-0.105, -0.080, -0.050, 0.011, 0.194, 0.498, 0.802", \
                          "-0.399, -0.374, -0.344, -0.283, -0.101, 0.204, 0.508", \
                          "-0.693, -0.669, -0.638, -0.577, -0.395, -0.091, 0.214" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLK;
                        timing_type     : hold_rising ;
                        rise_constraint(RF1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.176, 0.155, 0.128, 0.074, 0.000, 0.000, 0.000", \
                          "0.471, 0.449, 0.422, 0.368, 0.206, 0.000, 0.000", \
                          "0.765, 0.743, 0.716, 0.662, 0.500, 0.230, 0.000" \
                        )
                        }
                        fall_constraint(RF1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.166, 0.141, 0.111, 0.050, 0.000, 0.000, 0.000", \
                          "0.460, 0.435, 0.405, 0.344, 0.162, 0.000, 0.000", \
                          "0.754, 0.730, 0.699, 0.638, 0.456, 0.152, 0.000" \
                        )
                        }
               }
        }
        pin(WEN){
                direction : input;
                capacitance : 0.018;
                timing() {
                        related_pin     : CLK;
                        timing_type     : setup_rising ;
                        rise_constraint(RF1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.156, 0.181, 0.212, 0.275, 0.462, 0.775, 1.087", \
                          "0.133, 0.158, 0.189, 0.251, 0.439, 0.751, 1.063", \
                          "0.103, 0.128, 0.159, 0.222, 0.409, 0.722, 1.034", \
                          "0.044, 0.069, 0.101, 0.163, 0.351, 0.663, 0.975", \
                          "-0.132, -0.107, -0.076, -0.013, 0.174, 0.486, 0.799", \
                          "-0.426, -0.401, -0.370, -0.308, -0.120, 0.192, 0.505", \
                          "-0.720, -0.695, -0.664, -0.602, -0.414, -0.102, 0.210" \
                        )
                        }
                        fall_constraint(RF1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.195, 0.215, 0.239, 0.289, 0.439, 0.688, 0.937", \
                          "0.171, 0.191, 0.216, 0.266, 0.415, 0.664, 0.913", \
                          "0.142, 0.162, 0.187, 0.236, 0.386, 0.635, 0.884", \
                          "0.083, 0.103, 0.128, 0.177, 0.327, 0.576, 0.825", \
                          "-0.094, -0.074, -0.049, 0.001, 0.150, 0.399, 0.648", \
                          "-0.388, -0.368, -0.343, -0.293, -0.144, 0.105, 0.354", \
                          "-0.682, -0.662, -0.637, -0.587, -0.438, -0.189, 0.060" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLK;
                        timing_type     : hold_rising ;
                        rise_constraint(RF1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.020, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.079, 0.054, 0.023, 0.000, 0.000, 0.000, 0.000", \
                          "0.255, 0.230, 0.199, 0.137, 0.000, 0.000, 0.000", \
                          "0.550, 0.525, 0.493, 0.431, 0.243, 0.000, 0.000", \
                          "0.844, 0.819, 0.787, 0.725, 0.538, 0.225, 0.000" \
                        )
                        }
                        fall_constraint(RF1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.057, 0.037, 0.012, 0.000, 0.000, 0.000, 0.000", \
                          "0.234, 0.214, 0.189, 0.139, 0.000, 0.000, 0.000", \
                          "0.528, 0.508, 0.483, 0.433, 0.284, 0.035, 0.000", \
                          "0.822, 0.802, 0.777, 0.727, 0.578, 0.329, 0.080" \
                        )
                        }
               }
        }
        bus(A)   {
                bus_type : RF1SHD_ADDRESS;
                direction : input;
                capacitance : 0.012;
                timing() {
                        related_pin     : CLK;
                        timing_type     : setup_rising ;
                        rise_constraint(RF1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.208, 0.235, 0.268, 0.335, 0.535, 0.868, 1.201", \
                          "0.185, 0.211, 0.245, 0.311, 0.511, 0.844, 1.177", \
                          "0.155, 0.182, 0.215, 0.282, 0.482, 0.815, 1.148", \
                          "0.097, 0.123, 0.157, 0.223, 0.423, 0.756, 1.089", \
                          "-0.080, -0.053, -0.020, 0.047, 0.246, 0.579, 0.912", \
                          "-0.374, -0.347, -0.314, -0.248, -0.048, 0.285, 0.618", \
                          "-0.668, -0.642, -0.608, -0.542, -0.342, -0.009, 0.324" \
                        )
                        }
                        fall_constraint(RF1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.192, 0.216, 0.246, 0.307, 0.489, 0.792, 1.095", \
                          "0.168, 0.192, 0.223, 0.283, 0.465, 0.768, 1.071", \
                          "0.139, 0.163, 0.193, 0.254, 0.436, 0.739, 1.042", \
                          "0.080, 0.104, 0.134, 0.195, 0.377, 0.680, 0.983", \
                          "-0.097, -0.072, -0.042, 0.018, 0.200, 0.503, 0.807", \
                          "-0.391, -0.367, -0.336, -0.276, -0.094, 0.209, 0.512", \
                          "-0.685, -0.661, -0.630, -0.570, -0.388, -0.085, 0.218" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLK;
                        timing_type     : hold_rising ;
                        rise_constraint(RF1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.024, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.053, 0.027, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.112, 0.086, 0.052, 0.000, 0.000, 0.000, 0.000", \
                          "0.289, 0.262, 0.229, 0.162, 0.000, 0.000, 0.000", \
                          "0.583, 0.556, 0.523, 0.456, 0.257, 0.000, 0.000", \
                          "0.877, 0.850, 0.817, 0.750, 0.551, 0.218, 0.000" \
                        )
                        }
                        fall_constraint(RF1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.015, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.038, 0.014, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.067, 0.043, 0.013, 0.000, 0.000, 0.000, 0.000", \
                          "0.126, 0.102, 0.072, 0.011, 0.000, 0.000, 0.000", \
                          "0.303, 0.279, 0.248, 0.188, 0.006, 0.000, 0.000", \
                          "0.597, 0.573, 0.542, 0.482, 0.300, 0.000, 0.000", \
                          "0.891, 0.867, 0.837, 0.776, 0.594, 0.291, 0.000" \
                        )
                        }
               }
                internal_power(){
                        when : "CEN";
                        rise_power(RF1SHD_energy_template_sigslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.438, 0.438")
                        }
                        fall_power(RF1SHD_energy_template_sigslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.438, 0.438")
                        }
                }
        }
        bus(D)   {
                bus_type : RF1SHD_DATA;
                memory_write() {
                        address : A;
                        clocked_on : "CLK";
                }
                direction : input;
                capacitance : 0.003;
                timing() {
                        related_pin     : CLK;
                        timing_type     : setup_rising ;
                        rise_constraint(RF1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.051, 0.074, 0.103, 0.161, 0.335, 0.626, 0.917", \
                          "0.027, 0.050, 0.079, 0.138, 0.312, 0.602, 0.893", \
                          "-0.002, 0.021, 0.050, 0.108, 0.282, 0.573, 0.864", \
                          "-0.061, -0.038, -0.009, 0.049, 0.224, 0.514, 0.805", \
                          "-0.238, -0.214, -0.185, -0.127, 0.047, 0.338, 0.628", \
                          "-0.532, -0.508, -0.479, -0.421, -0.247, 0.044, 0.334", \
                          "-0.826, -0.803, -0.774, -0.715, -0.541, -0.251, 0.040" \
                        )
                        }
                        fall_constraint(RF1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.088, 0.111, 0.141, 0.199, 0.375, 0.667, 0.960", \
                          "0.064, 0.088, 0.117, 0.176, 0.351, 0.644, 0.936", \
                          "0.035, 0.058, 0.088, 0.146, 0.322, 0.614, 0.907", \
                          "-0.024, -0.000, 0.029, 0.087, 0.263, 0.556, 0.848", \
                          "-0.200, -0.177, -0.148, -0.089, 0.086, 0.379, 0.672", \
                          "-0.495, -0.471, -0.442, -0.383, -0.208, 0.085, 0.378", \
                          "-0.789, -0.765, -0.736, -0.677, -0.502, -0.209, 0.083" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLK;
                        timing_type     : hold_rising ;
                        rise_constraint(RF1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.095, 0.072, 0.043, 0.000, 0.000, 0.000, 0.000", \
                          "0.119, 0.095, 0.066, 0.008, 0.000, 0.000, 0.000", \
                          "0.148, 0.125, 0.096, 0.038, 0.000, 0.000, 0.000", \
                          "0.207, 0.184, 0.155, 0.096, 0.000, 0.000, 0.000", \
                          "0.383, 0.360, 0.331, 0.273, 0.099, 0.000, 0.000", \
                          "0.678, 0.654, 0.625, 0.567, 0.393, 0.102, 0.000", \
                          "0.972, 0.948, 0.919, 0.861, 0.687, 0.396, 0.106" \
                        )
                        }
                        fall_constraint(RF1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.019, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.078, 0.055, 0.025, 0.000, 0.000, 0.000, 0.000", \
                          "0.254, 0.231, 0.202, 0.143, 0.000, 0.000, 0.000", \
                          "0.549, 0.525, 0.496, 0.437, 0.262, 0.000, 0.000", \
                          "0.843, 0.819, 0.790, 0.732, 0.556, 0.263, 0.000" \
                        )
                        }
               }
        }

        cell_leakage_power : 4.44E-2;
}
}
